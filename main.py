# -*- coding: utf-8 -*-
# !/usr/bin/env python3

import settings
import telebot
from telebot.types import (ReplyKeyboardMarkup,
                           ReplyKeyboardRemove,
                           KeyboardButton,
                           InlineKeyboardButton,
                           InlineKeyboardMarkup)


USER_REPLIES = {}
MSGS_DB = {}


bot = telebot.TeleBot(settings.BOT_TOKEN, parse_mode='HTML')


def initial_markup():
    markup = ReplyKeyboardMarkup(row_width=1)
    markup.add(KeyboardButton(settings.BTN_SUGGEST_POST),
               KeyboardButton(settings.BTN_FEEDBACK))
    return markup


def cancel_markup():
    markup = ReplyKeyboardMarkup(row_width=1)
    markup.add(KeyboardButton(settings.BTN_CANCEL))
    return markup


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.from_user.id, "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É!</b>\n\n"
                     "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª, –∞ —Ç–∞–∫–∂–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏.\n"
                     "–ü—Ä–æ–ø–∞–ª–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞? –ù–∞–ø–∏—à–∏ /start.", reply_markup=initial_markup())


# Suggestions

@bot.message_handler(func=lambda message: settings.BTN_SUGGEST_POST in message.text)
def suggest_post_step_one(message):
    msg = bot.send_message(message.from_user.id, "<b>–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b>\n\n"
                           "–ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å—Ç—ã –∞–Ω–æ–Ω–∏–º–Ω—ã–µ. "
                           "–ï—Å–ª–∏ –∂–µ–ª–∞–µ—à—å, –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π @–Ω–∏–∫ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å—Ç–∞.", reply_markup=cancel_markup())
    bot.register_next_step_handler(msg, suggest_post_step_two)


def suggest_post_step_two(message):
    if message.text == settings.BTN_CANCEL:
        bot.send_message(message.from_user.id, "<b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>\n\n",
                         reply_markup=initial_markup())
        return

    for admin_id in settings.ADMINS:

        fw_msg = bot.forward_message(
            admin_id, message.from_user.id, message.id)

        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton('‚úÖ –ó–∞–ø–æ—Å—Ç–∏—Ç—å –≤ –∫–∞–Ω–∞–ª', callback_data=f'post-{fw_msg.id}-{message.from_user.id}'),
        )

        bot.send_message(admin_id, f"{message.from_user.full_name} –ø—Ä–∏—Å–ª–∞–ª –ø–æ—Å—Ç. –ó–∞–ø–æ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ –∫–∞–Ω–∞–ª —Å–µ–π—á–∞—Å?",
                         reply_markup=markup)

        MSGS_DB[str(fw_msg.id)] = fw_msg.text or fw_msg.caption or ''

    bot.send_message(message.from_user.id, "<b>‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.</b>\n\n"
                     "–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –µ–≥–æ –æ–ø—É–±–ª–∏–∫—É—é—Ç.",
                     reply_markup=initial_markup())


# Feedback

@bot.message_handler(func=lambda message: settings.BTN_FEEDBACK in message.text)
def feedback_step_one(message):
    msg = bot.send_message(
        message.from_user.id, "<b>–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ.</b>\n\n",
        reply_markup=cancel_markup())
    bot.register_next_step_handler(msg, feedback_step_two)


def feedback_step_two(message):
    if message.text == settings.BTN_CANCEL:
        bot.send_message(message.from_user.id, "<b>–û–∫, –∫–∞–∫ —Ö–æ—á–µ—à—å.</b>\n\n",
                         reply_markup=initial_markup())
        return

    for admin_id in settings.ADMINS:

        bot.forward_message(admin_id, message.from_user.id, message.id)

        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton('üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'fb-{message.id}-{message.from_user.id}'),
        )

        bot.send_message(admin_id, f"{message.from_user.full_name} –ø—Ä–∏—Å–ª–∞–ª –æ—Ç–∑—ã–≤. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å...",
                         reply_markup=markup)

    bot.send_message(message.from_user.id, "<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                     "–Ø –ø—Ä–∏—à–ª—é –æ—Ç–≤–µ—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è.",
                     reply_markup=initial_markup())


def feedback_step_reply(message):
    if message.text == settings.BTN_CANCEL:
        USER_REPLIES.pop(message.from_user.id)
        bot.send_message(message.from_user.id, "<b>–û–∫, –∫–∞–∫ —Ö–æ—á–µ—à—å.</b>\n\n",
                         reply_markup=initial_markup())
        return

    bot.send_message(USER_REPLIES[message.from_user.id][1], '<i>–ü—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç</i>\n\n' + message.text,
                     reply_to_message_id=USER_REPLIES[message.from_user.id][0])

    bot.send_message(message.from_user.id, "<b>–ì–æ—Ç–æ–≤–æ</b>\n\n",
                     reply_markup=ReplyKeyboardRemove())

    USER_REPLIES.pop(message.from_user.id)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global MSGS_DB, USER_REPLIES

    if not call.from_user.id in settings.ADMINS:
        return

    data = call.data.split('-')
    if data[0] == "post":
        bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        ch_msg = bot.copy_message(
            settings.CHANNEL_ID, call.from_user.id, data[1])
        if data[1] in MSGS_DB:
            cp = MSGS_DB[data[1]]
            try:
                bot.edit_message_caption(
                    cp+settings.ADDED_CAPTION, settings.CHANNEL_ID, ch_msg.message_id)
            except Exception:
                bot.edit_message_text(
                    cp+settings.ADDED_CAPTION, settings.CHANNEL_ID, ch_msg.message_id, disable_web_page_preview=True)
            MSGS_DB.pop(data[1])
        bot.send_message(data[2],
                         f"<b>üéâ <a href='http://t.me/c/{settings.CHANNEL_ID*-1}/{ch_msg.message_id}'>–¢–≤–æ–π –ø–æ—Å—Ç</a> —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏!</b>\n\n")

    elif data[0] == "fb":
        bot.answer_callback_query(call.id, "–ü–∏—à–∏ –æ—Ç–≤–µ—Ç")
        msg = bot.send_message(call.from_user.id, "<b>–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)</b>\n\n",
                               reply_markup=cancel_markup())
        USER_REPLIES[call.from_user.id] = [data[1], data[2]]
        bot.register_next_step_handler(msg, feedback_step_reply)

# Bootstrap


def main():
    bot.infinity_polling()


if __name__ == '__main__':
    main()
